package tp9_nuñez_2022;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author emi
 */
public class Frame extends javax.swing.JFrame {

    DefaultTableModel modelo = null;
    TableRowSorter<TableModel> elQueOrdena = null;
   
    
    //se creó una funcion con una expresion regular para saber si solo contiene letras una variable.
    public static boolean isAlpha(String s) {
        return s != null && s.matches("^[a-zA-Z\\s]*$");
    }
    public Frame() {
        initComponents();
        modelo = new DefaultTableModel();
        modelo.addColumn("Name");
        modelo.addColumn("Age");
        modelo.addColumn("Weight");
        modelo.addColumn("Breed");
        elQueOrdena = new TableRowSorter<TableModel>(modelo);
        
        jTable1.setModel(modelo);
        jTable1.setRowSorter(elQueOrdena);
        
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(120);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(60);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(60);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(100);
        
        jTable1.setAutoResizeMode(jTable1.AUTO_RESIZE_OFF);
        jTable1.updateUI();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        filter_Text = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        modifyButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        name_Text = new javax.swing.JTextField();
        age_Text = new javax.swing.JTextField();
        weight_Text = new javax.swing.JTextField();
        breed_Text = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(587, 50));

        filter_Text.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));
        filter_Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_TextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filter_Text, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addGap(279, 279, 279))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filter_Text, javax.swing.GroupLayout.PREFERRED_SIZE, 30, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setPreferredSize(new java.awt.Dimension(280, 307));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setPreferredSize(new java.awt.Dimension(255, 42));

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel3.add(addButton);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel3.add(deleteButton);

        modifyButton.setText("Modify");
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });
        jPanel3.add(modifyButton);

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jPanel4.setPreferredSize(new java.awt.Dimension(270, 181));

        name_Text.setBorder(javax.swing.BorderFactory.createTitledBorder("Name"));

        age_Text.setBorder(javax.swing.BorderFactory.createTitledBorder("Age"));
        age_Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                age_TextActionPerformed(evt);
            }
        });

        weight_Text.setBorder(javax.swing.BorderFactory.createTitledBorder("Weight"));

        breed_Text.setBorder(javax.swing.BorderFactory.createTitledBorder("Breed"));
        breed_Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breed_TextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(age_Text, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(weight_Text, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(breed_Text, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                    .addComponent(name_Text))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(name_Text, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(age_Text, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weight_Text, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(breed_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.LINE_END);

        jPanel5.setPreferredSize(new java.awt.Dimension(463, 426));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Weight", "Breed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getAccessibleContext().setAccessibleDescription("");

        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void breed_TextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breed_TextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_breed_TextActionPerformed

    private void age_TextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_age_TextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_age_TextActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        //se crean las variables.
        String name = name_Text.getText().trim();
        String breed = breed_Text.getText().trim();
        int age = 0;
        double weight = 0.0;
        String correctName = "";
        String correctBreed = "";
        String ageText = age_Text.getText().trim();
        String weightText = weight_Text.getText().trim();
    
        // se comprueba si el nombre cumple con la condicion de solo tener letras.
        if (isAlpha(name)) {
            correctName = name;
        } else {
            JOptionPane.showMessageDialog(modifyButton, "Para ingresar el nombre solo se permiten letras!", "Atencion", JOptionPane.WARNING_MESSAGE);
            name_Text.setText("");
            name_Text.requestFocus();
            return; 
        }
        // se comprueba si la raza cumple con la condicion de solo tener letras.
        if (isAlpha(breed)) {
            correctBreed = breed;
        } else {
            JOptionPane.showMessageDialog(modifyButton, "Para ingresar la raza solo se permiten letras!", "Atencion", JOptionPane.WARNING_MESSAGE);
            breed_Text.setText("");
            breed_Text.requestFocus();
        }
       
        // se comprueba si la edad cumple con la condicion de solo tener números.
        try {
            ageText.chars().allMatch(Character::isDigit);
            //se transforma el dato de string a int.
            age = Integer.parseInt(age_Text.getText().trim());

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(modifyButton, "Para ingresar la edad solo se permiten números!", "Atencion", JOptionPane.WARNING_MESSAGE);
            age_Text.setText("");
            age_Text.requestFocus();
        }
        
        // se comprueba si el peso cumple con la condicion de solo tener números.
        try {
            //se transforma el dato de string a double, mientras se comprueba si solo contiene números.
            weight = Double.parseDouble(weightText);
        } 
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(modifyButton, "Para ingresar el peso solo se permiten números!", "Atencion", JOptionPane.WARNING_MESSAGE);
            weight_Text.setText("");
            weight_Text.requestFocus();
        }
       
        
        /*si cumple con las condiciones, se cargaran los datos en el arraylist, luego se imprimirá 
        por pantalla los datos cargados, y por ultimo dejará vacios los campos de datos*/
        if (age > 0 && weight > 0.0 && !correctName.isEmpty() && !correctBreed.isEmpty()){
            Object[] rowData = {name_Text.getText().trim().toUpperCase(),
                            age_Text.getText().trim(),
                            weight_Text.getText().trim(),
                            breed_Text.getText().trim()};
            modelo.addRow(rowData);
        
            name_Text.setText("");
            age_Text.setText("");
            weight_Text.setText("");
            breed_Text.setText("");
            name_Text.requestFocus();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try{
            int index = jTable1.getSelectedRow();
            modelo.removeRow(index);
            
            name_Text.setText("");
            age_Text.setText("");
            weight_Text.setText("");
            breed_Text.setText("");
            name_Text.requestFocus();
        }
        
        catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Para poder borrar un registro, debe seleccionarlo!", "Atencion", JOptionPane.WARNING_MESSAGE);
        }
                
        
    }//GEN-LAST:event_deleteButtonActionPerformed
   
    private void filter_TextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_TextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filter_TextActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int index = jTable1.getSelectedRow();
            name_Text.setText(jTable1.getValueAt(index,0).toString());
            age_Text.setText(jTable1.getValueAt(index,1).toString());
            weight_Text.setText(jTable1.getValueAt(index,2).toString());
            breed_Text.setText(jTable1.getValueAt(index,3).toString());
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        elQueOrdena.setRowFilter(RowFilter.regexFilter(filter_Text.getText().trim(), 0));
    }//GEN-LAST:event_jTable1KeyReleased

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        // TODO add your handling code here:
        int index = jTable1.getSelectedRow();
        if(index  < 0) {
            JOptionPane.showMessageDialog(null, "Para poder modificar un registro, debe seleccionarlo!", "Atencion", JOptionPane.WARNING_MESSAGE);
        }
        else {
            //se crean las variables.
            String name = name_Text.getText().trim();
            String breed = breed_Text.getText().trim();
            int age = 0;
            double weight = 0.0;
            String correctName = "";
            String correctBreed = "";
            String ageText = age_Text.getText().trim();
            String weightText = weight_Text.getText().trim();

            // se comprueba si el nombre cumple con la condicion de solo tener letras.
            if (isAlpha(name)) {
                correctName = name;
            } else {
                JOptionPane.showMessageDialog(modifyButton, "Para ingresar el nombre solo se permiten letras!", "Atencion", JOptionPane.WARNING_MESSAGE);
                name_Text.setText("");
                name_Text.requestFocus();
                return;
            }
            // se comprueba si la raza cumple con la condicion de solo tener letras.
            if (isAlpha(breed)) {
                correctBreed = breed;
            } else {
                JOptionPane.showMessageDialog(modifyButton, "Para ingresar la raza solo se permiten letras!", "Atencion", JOptionPane.WARNING_MESSAGE);
                breed_Text.setText("");
                breed_Text.requestFocus();
            }

            // se comprueba si la edad cumple con la condicion de solo tener números.
            try {
                ageText.chars().allMatch(Character::isDigit);
                //se transforma el dato de string a int.
                age = Integer.parseInt(age_Text.getText().trim());

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(modifyButton, "Para ingresar la edad solo se permiten números!", "Atencion", JOptionPane.WARNING_MESSAGE);
                age_Text.setText("");
                age_Text.requestFocus();
            }

            // se comprueba si el peso cumple con la condicion de solo tener números.
            try {
                //se transforma el dato de string a double, mientras se comprueba si solo contiene números.
                weight = Double.parseDouble(weightText);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(modifyButton, "Para ingresar el peso solo se permiten números!", "Atencion", JOptionPane.WARNING_MESSAGE);
                weight_Text.setText("");
                weight_Text.requestFocus();
            }

            /*si cumple con las condiciones, se cargaran los datos en el arraylist, luego se imprimirá 
        por pantalla los datos cargados, y por ultimo dejará vacios los campos de datos*/
            if (age > 0 && weight > 0.0 && !correctName.isEmpty() && !correctBreed.isEmpty()) {
   
                modelo.setValueAt(name_Text.getText(), index, 0);
                modelo.setValueAt(age_Text.getText(), index, 1);
                modelo.setValueAt(weight_Text.getText(), index, 2);
                modelo.setValueAt(breed_Text.getText(), index, 3);
                
                name_Text.setText("");
                age_Text.setText("");
                weight_Text.setText("");
                breed_Text.setText("");
                name_Text.requestFocus();
            }
        }
    }//GEN-LAST:event_modifyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField age_Text;
    private javax.swing.JTextField breed_Text;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField filter_Text;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton modifyButton;
    private javax.swing.JTextField name_Text;
    private javax.swing.JTextField weight_Text;
    // End of variables declaration//GEN-END:variables
}
